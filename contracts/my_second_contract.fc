;; store in c4 the address of the sender of the last message and the integer total - a 32-bit unsigned number;
;; when receiving an internal incoming message, the contract must take the address from in_msg, a 32-bit unsigned integer from the body of the message, add it to total, and store the address and amount in the contract data;
;; The smart contract must have a get_sum method that allows you to return the total value;

#include "imports/stdlib.fc";

;; sender_address is the address of last sender
global slice sender_address;
;; sum is the summerization of tons
global int sum;

;; load_data populates storage variables using stored data
() load_data() impure {
    slice ds = get_data().begin_parse();
    sender_address = ds~load_msg_addr();
    sum = ds~load_uint(32);
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(sender_address)
            .store_uint(sum, 32)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	if (in_msg_body.slice_empty?()) { ;; ignore empty messages
		return ();
	}
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    sender_address = cs~load_msg_addr();
    int num = in_msg_body~load_uint(32);
    load_data();
    sum += num;
    save_data();
}

int get_sum() method_id {
    load_data();
    return sum;
}
